/*
 * File Auto-Generated by AcceptanceMark - DO NOT EDIT
 * input file: image-tests.md
 * generated file: imagetests_ImageLoadingTests.swift
 *
 * -- Test Specification -- 
 *
 * ## Image Loading
 * | name:String   || loaded:Bool  |
 * | ------------- || ------------ |
 * | available.png || true         |
 * | missing.png   || false        |
 */

//// Don't forget to create a test runner: 
//
//class imagetests_ImageLoadingRunner: imagetests_ImageLoadingRunnable {
//
//	func run(input: imagetests_ImageLoadingInput) throws -> imagetests_ImageLoadingOutput {
//		return imagetests_ImageLoadingOutput(<#parameters#>)
//	}
//}

import XCTest

struct imagetests_ImageLoadingInput {
	let name: String
}

struct imagetests_ImageLoadingOutput: Equatable {
	let loaded: Bool
}

protocol imagetests_ImageLoadingRunnable {
	func run(input: imagetests_ImageLoadingInput) throws -> imagetests_ImageLoadingOutput
}

class imagetests_ImageLoadingTests: XCTestCase {

	var testRunner: imagetests_ImageLoadingRunnable!

	override func setUp() {
		// MARK: Implement the imagetests_ImageLoadingRunner() class!
		testRunner = imagetests_ImageLoadingRunner()
	}

	func testImageLoading_row1() {
		let input = imagetests_ImageLoadingInput(name: "available.png")
		let expected = imagetests_ImageLoadingOutput(loaded: true)
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testImageLoading_row2() {
		let input = imagetests_ImageLoadingInput(name: "missing.png")
		let expected = imagetests_ImageLoadingOutput(loaded: false)
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

}

func == (lhs: imagetests_ImageLoadingOutput, rhs: imagetests_ImageLoadingOutput) -> Bool {
	return
		lhs.loaded == rhs.loaded
}
